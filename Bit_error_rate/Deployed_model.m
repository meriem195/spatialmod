m=16;
snr=0;
axis=linspace(1,10,10)
y=[];
for snr=1:1:10
    y(snr)= myNeuralNetworkFunction([m 32 snr]);
end
 plot(axis,y)

function [Y,Xf,Af] = myNeuralNetworkFunction(X,~,~)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Auto-generated by MATLAB, 02-Apr-2020 13:13:02.
%
% [Y] = myNeuralNetworkFunction(X,~,~) takes these arguments:
%
%   X = 1xTS cell, 1 inputs over TS timesteps
%   Each X{1,ts} = Qx3 matrix, input #1 at timestep ts.
%
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = Qx1 matrix, output #1 at timestep ts.
%
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [4;1;0.1];
x1_step1.gain = [0.00793650793650794;0.0317460317460317;0.202020202020202];
x1_step1.ymin = -1;

% Layer 1
b1 = [8.4798812134525007878;-0.038025797691923407529;1.2953495003379809081;3.530652619325381103;0.089214380304420290435;-6.4001185641265774251;-2.0989702959053753162;5.8269180997338407835;-13.970428558288258358;-4.6428437468212155892;-6.8858670419459802048;-4.9688655812812205781;-0.31262230086165365694;-2.6727072874674644432;0.44471352606103731198;-1.6298318048387863133;-0.67569718965843739156;1.2591970049974092749;-8.0209473673357631895;0.11138388726549453001;-1.3848368126299135383;-4.3036359626277373991;4.1840666474111829487;4.581173349116857807;-3.6699517955994402918;4.6412276408850337006;-3.9424383351359235661;-0.3766778115539156091;-1.1792754814060144586;-5.7992019786388482316];
IW1_1 = [0.087228867156625866652 8.2469154130633519628 0.077215916739741874419;-0.69823737068110847126 -1.094962843429748256 0.067435987921211054674;-2.2029373069627644632 -1.7298118970798952443 0.39819979646528769202;1.1228456036210117119 -2.5327076299884487831 -0.19854204479182949172;2.3971940020745892141 1.2463505185749705895 0.13738749573344563593;-6.1597781958745683184 0.34852348578322345229 0.18133146436473618346;-3.0635510486761785565 -1.1375275168843379525 0.028285963388723214113;5.9583284026286156276 -0.5376439381304810583 -0.56486770745370651348;-0.49347036666756555201 11.855750897103316532 -0.10544032809869660627;-1.4092422378175339936 -3.265850556891509715 0.070829735126589729588;-6.4942302137010434748 -0.010579897560259772168 -0.45213773039802968023;-0.42584941971591350196 -3.8436359763984615512 0.095111038083527346676;0.96550340661044808943 -0.94211464509325015815 -0.055584255308527438788;-3.768637359129620279 0.8195563802815472032 0.35715022307140581459;4.9196034284968224171 -0.30278308639601542174 -0.59655809597099351826;0.94744668821986699481 1.9851342127803144333 -0.32181161307996153376;-0.19318688993942095822 -0.61518166176600286299 -0.17166055597183693671;3.5421147538626778228 0.85498051463284985285 -0.275636077989597994;-0.049446270847211176713 -6.9802047389471706396 -0.17002811683965809997;-2.8804785597495623506 1.4217927529357281546 -0.175038150380101315;0.291854556543654442 1.5492351221978932774 0.07273544188522959586;-8.6424577577308099308 -1.4570830255861111358 -0.021327191008475458733;7.8042086063002216179 0.67965274083852966758 0.049599864181083544445;-2.568735864507615041 1.5549619929041935684 -0.50101186549135690029;3.1799425279491284613 1.5922631665570989856 -0.27427047586901770471;4.4934315920651171083 0.55968973876098637721 -0.048012404296212930765;-2.5830559179817780269 -0.62247652730718283642 0.51569028675033989906;2.8078402269165803062 0.32489120546881394835 0.42797733861782560894;0.90759908292925550732 0.93904666870260078415 0.38221755331602624839;-6.0618743887003558868 -0.071808176548919133708 -0.042874247338402282637];

% Layer 2
b2 = -2.2992938760819163768;
LW2_1 = [2.0327833989262340531 5.3454756175606714663 -1.5661358048102640428 0.89230939108729412368 2.7350515223450964086 -3.2561540603196696964 -3.8020411322333771409 0.87324057066614180211 -4.2029097222653692967 -1.8745350916749381476 -1.0326378481983475854 4.3013028118047023085 5.086102478533556237 -1.2197270330407721239 -1.4754807143655828128 -1.598510626382100952 -4.3481709610881038586 2.3317147506444610983 5.2526542114764014357 2.8468628062766003772 1.2780532737329732829 -3.0836401137672910799 -6.6153066974998271377 2.2551393924209683917 3.5756080464345170178 6.2740071928001004409 2.0616474832812832219 -3.583429237314920357 0.7360685523311092382 8.3605368947318190465];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = 2.13774107038833;
y1_step1.xoffset = 0.023523;

% ===== SIMULATION ========

% Format Input Arguments
isCellX = iscell(X);
if ~isCellX
    X = {X};
end

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
    Q = size(X{1},1); % samples/series
else
    Q = 0;
end

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS
    
    % Input 1
    X{1,ts} = X{1,ts}';
    Xp1 = mapminmax_apply(X{1,ts},x1_step1);
    
    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*Xp1);
    
    % Layer 2
    a2 = repmat(b2,1,Q) + LW2_1*a1;
    
    % Output 1
    Y{1,ts} = mapminmax_reverse(a2,y1_step1);
    Y{1,ts} = Y{1,ts}';
end

% Final Delay States
Xf = cell(1,0);
Af = cell(2,0);

% Format Output Arguments
if ~isCellX
    Y = cell2mat(Y);
end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
y = bsxfun(@minus,x,settings.xoffset);
y = bsxfun(@times,y,settings.gain);
y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
x = bsxfun(@minus,y,settings.ymin);
x = bsxfun(@rdivide,x,settings.gain);
x = bsxfun(@plus,x,settings.xoffset);
end
